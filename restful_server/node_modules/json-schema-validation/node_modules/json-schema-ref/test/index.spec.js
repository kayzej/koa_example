var Assert = require( 'assert' );
var _ = require( 'lodash' );
var Parser = require( '../src/index' );

describe( 'json-schema-ref 测试', function(){

    it( '内部ref查找', function( done ){

        var internal = {
            type: 'string',
            description: 'internal schema'
        };

        var schema = {
            type: 'object',
            properties: {
                internal: {
                    $ref: '#/definitions/internal'
                }
            },
            definitions: {
                internal: internal
            }
        };

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.internal = internal;

        Parser( schema, function( result ){
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].error, null );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].path, '#/properties/internal/$ref' );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].schema, internal );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });

    });

    it( '外部ref查找', function( done ){

        var external = require( './json/external.json' );
        var externalURL = 'http://localhost:9999/json/external.json';

        var schema = {
            type: 'object',
            properties: {
                external: {
                    $ref: externalURL
                }
            }
        };

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.external = external;

        Parser( schema, function( result ){
            Assert.deepEqual( result.refs[ externalURL ].error, null );
            Assert.deepEqual( result.refs[ externalURL ].path, '#/properties/external/$ref' );
            Assert.deepEqual( result.refs[ externalURL ].schema, external );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });
    });

    it( '内部 & 外部ref查找', function( done ){

        var external = require( './json/external.json' );
        var externalURL = 'http://localhost:9999/json/external.json';
        var internal = {
            type: 'string',
            description: 'internal schema'
        };

        var schema = {
            type: 'object',
            properties: {
                external: {
                    $ref: externalURL
                },
                internal: {
                    $ref: '#/definitions/internal'
                }
            },
            definitions: {
                internal: internal
            }
        };

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.internal = internal;
        schemaCopy.properties.external = external;

        Parser( schema, function( result ){

            Assert.deepEqual( result.refs[ externalURL ].error, null );
            Assert.deepEqual( result.refs[ externalURL ].path, '#/properties/external/$ref' );
            Assert.deepEqual( result.refs[ externalURL ].schema, external );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].error, null );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].path, '#/properties/internal/$ref' );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].schema, internal );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });
    });

    it( '嵌套:外部ref查找', function( done ){

        var external = require( './json/external.json' );
        var nestedExternal = require( './json/nested_external.json' );
        var externalNestedURL = 'http://localhost:9999/json/nested_external.json';
        var externalURL = 'http://localhost:9999/json/external.json';

        var schema = {
            type: 'object',
            properties: {
                nested_external: {
                    $ref: externalNestedURL
                }
            }
        };

        nestedExternal.properties.info = external;

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.nested_external = nestedExternal;

        Parser( schema, function( result ){
            Assert.deepEqual( result.refs[ externalURL ].error, null );
            Assert.deepEqual( result.refs[ externalURL ].path, '#/properties/info/$ref' );
            Assert.deepEqual( result.refs[ externalURL ].schema, external );
            Assert.deepEqual( result.refs[ externalNestedURL ].error, null );
            Assert.deepEqual( result.refs[ externalNestedURL ].path, '#/properties/nested_external/$ref' );
            Assert.deepEqual( result.refs[ externalNestedURL ].schema, nestedExternal );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });
    });

    it( 'ref with required', function( done ){

        var internalItem = {
            type: 'object',
            description: 'internal item schema',
            properties: {
                title: {
                    type: 'string'
                },
                price: {
                    type: 'integer'
                },
                pic: {
                    type: 'string'
                }
            }
        };

        var internal = {
            type: 'object',
            description: 'internal schema',
            properties: {
                name: {
                    type: 'string'
                },
                sex: {
                    type: 'string'
                },
                hobby: {
                    type: 'string'
                },
                item: {
                    $ref: '#/definitions/item',
                    required: [
                        'title',
                        'price'
                    ]
                }
            },
            definitions: {
                item: internalItem
            }
        };

        var schema = {
            type: 'object',
            properties: {
                internal: {
                    $ref: '#/definitions/internal',
                    required: [
                        'item',
                        'name'
                    ]
                }
            },
            definitions: {
                internal: internal
            }
        };

        // 期望的转化后的schema
        var schemaResult = {
            type: 'object',
            properties: {
                internal: {
                    type: 'object',
                    description: 'internal schema',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        item: {
                            type: 'object',
                            description: 'internal item schema',
                            properties: {
                                title: {
                                    type: 'string'
                                },
                                price: {
                                    type: 'integer'
                                }
                            }
                        }
                    },
                    definitions: {
                        item: internalItem
                    }
                }
            },
            definitions: {
                internal: internal
            }
        };

        /**
         * 解析后的refInternal
         */
        var refInternal = {
            type: 'object',
            description: 'internal schema',
            properties: {
                name: {
                    type: 'string'
                },
                sex: {
                    type: 'string'
                },
                hobby: {
                    type: 'string'
                },
                item: {
                    type: 'object',
                    description: 'internal item schema',
                    properties: {
                        title: {
                            type: 'string'
                        },
                        price: {
                            type: 'integer'
                        }
                    }
                }
            },
            definitions: {
                item: internalItem
            }
        };

        Parser( schema, function( result ){
            Assert.deepEqual( result.refs[ '#/definitions/item' ].path, '#/properties/item/$ref' );
            Assert.deepEqual( result.refs[ '#/definitions/item' ].schema, internalItem );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].path, '#/properties/internal/$ref' );
            Assert.deepEqual( result.refs[ '#/definitions/internal' ].schema, refInternal );
            Assert.deepEqual( result.schema, schemaResult );
            done();
        });
    });

    it( 'options:refs', function( done ){
        var external = {
            type: 'string',
            description: 'internal schema'
        };

        var fakeExternalURL = 'http://taobao.com/schema.json';

        var options = {
            refs: {}
        };

        options.refs[ fakeExternalURL ] = external;

        var schema = {
            type: 'object',
            properties: {
                external: {
                    $ref: fakeExternalURL
                }
            }
        };

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.external = external;

        Parser( schema, options, function( result ){
            Assert.deepEqual( result.refs[ fakeExternalURL ].error, null );
            Assert.deepEqual( result.refs[ fakeExternalURL ].path, '#/properties/external/$ref' );
            Assert.deepEqual( result.refs[ fakeExternalURL ].schema, external );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });
    });

    it( 'options:refHandle', function( done ){
        var external = require( './json/external.json' );

        var options = {
            refHandle: function( value ){
                if( value === 'external' ){
                    return 'http://localhost:9999/json/external.json'
                }
                else {
                    return value;
                }
            }
        };

        var schema = {
            type: 'object',
            properties: {
                external: {
                    $ref: "external"
                }
            }
        };

        var schemaCopy = _.cloneDeep( schema );
        schemaCopy.properties.external = external;

        Parser( schema, options, function( result ){
            Assert.deepEqual( result.refs[ 'external' ].error, null );
            Assert.deepEqual( result.refs[ 'external' ].path, '#/properties/external/$ref' );
            Assert.deepEqual( result.refs[ 'external' ].schema, external );
            Assert.deepEqual( result.schema, schemaCopy );
            done();
        });
    });

    it( '不包含refs', function( done ){

        var schema = {
            type: 'object',
            properties: {
                internal: {
                    type: 'string',
                    description: 'internal schema'
                }
            }
        };

        Parser( schema, function( result ){
            Assert.deepEqual( result.schema, schema );
            done();
        });
    });
});