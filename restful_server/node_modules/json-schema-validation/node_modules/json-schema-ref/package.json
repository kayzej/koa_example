{
  "name": "json-schema-ref",
  "version": "0.0.4",
  "description": "解析json-schema中包含的$ref字段，最终合并为一个整体",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha test/*.spec.js -t 1000000 -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git@gitlab.alibaba-inc.com:jsonnanny/json-schema-ref.git"
  },
  "keywords": [
    "json-schema",
    "$ref",
    "parse"
  ],
  "author": {
    "name": "yinruo.nyj@taobao.com"
  },
  "license": "MIT",
  "dependencies": {
    "lodash": "^2.4.1",
    "json-schema-helper": "0.0.3",
    "request": "^2.36.0"
  },
  "devDependencies": {
    "node-static": "^0.7.3"
  },
  "readme": "## json-schema-ref\n\n解析JSON-Schema中包含的 `$ref` 关键字，并最终合并成一个完整的模块。\n\n- 支持内部引用，如`#/definitions/internal`\n- 支持外部HTTP引用，如`http://taobao.com/schema.json`\n- 支持嵌套，如ref中的schema还包含ref的情况\n- 支持River规范，若$ref中指向的schema为river格式，则使用`schema.response`\n\n## 安装\n\n```\nnpm install json-schema-ref --save\n```\n## 使用\n\n```javascript\n\nvar Parser = require( 'json-schema-ref' );\n\nvar schema = {\n    type: 'object',\n    properties: {\n        info: {\n            $ref: 'http://taobao.com/schema.json'\n        }\n    }\n};\n\nParser( schema, function( result ){\n    console.log( result );\n\n    // --> result.refs: { 'http://taobao.com/schema.json': { error: null, schema: .. 对应的schema内容, path: '#/properties/info/$ref' }\n    // --> result.schema: 合并后的schema\n});\n\n```\n\n## options\n\n`Parser`接收额外的参数:\n\n```\nParser( schema, options, next );\n```\n\n参数如下：\n\n- `refs`: `Object`，给定预置的`$ref`对应的schema\n- `refHandle`: `Function`，接受每个遇到的`$ref`对应的值作为参数，必须返回一个字符串，将作为`$ref`计算时的值\n\n使用`refs`参数的例子：\n\n```\nvar options = {\n    refs: {\n        'http://taobao.com/schema.json': {\n            type: 'string',\n            description: 'internal schema'\n        }\n    }\n};\n\nvar schema = {\n    type: 'object',\n    properties: {\n        external: {\n            $ref: 'http://taobao.com/schema.json'\n        }\n    }\n};\n\nParser( schema, options, function( result ){\n    console.log( result.schema );\n    /* output:\n      {\n          type: 'object',\n          properties: {\n              external: {\n                  type: 'string',\n                  description: 'internal schema'\n              }\n          }\n      }\n     */\n});\n```\n\n使用`refHandle`的例子:\n\n```\nvar options = {\n    refHandle: function( value ){\n        if( value === 'external' ){\n            return 'http://localhost:9999/json/external.json'\n        }\n        else {\n            return value;\n        }\n    }\n};\n\nvar schema = {\n    type: 'object',\n    properties: {\n        external: {\n            $ref: \"external\"\n        }\n    }\n};\n\nParser( schema, options, function( result ){\n    /* 计算结果中使用 `http://localhost:9999/json/external.json` 代替 `external` 来进行取值 */\n});\n```\n\n## 测试\n\n需要先开启本地服务:`node test/server.js`，然后执行`npm test`",
  "readmeFilename": "README.md",
  "_id": "json-schema-ref@0.0.4",
  "dist": {
    "shasum": "1e03af89003b913dac962dd421f7bcaf12bc8bf9"
  },
  "_from": "json-schema-ref@*",
  "_resolved": "https://registry.npmjs.org/json-schema-ref/-/json-schema-ref-0.0.4.tgz"
}
